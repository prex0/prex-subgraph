type Token @entity {
  id: ID!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type EndUser @entity {
  id: ID!
  createdAt: BigInt!
  updatedAt: BigInt!
}

enum LockStatus {
  LIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

type ExpiringLock @entity {
  id: ID!
  token: Token!
  sender: EndUser!
  amount: BigInt!
  expiry: BigInt!
  metadata: Bytes!
  deposits: [ExpiringLockDeposit!]! @derivedFrom(field: "parent")
  distributions: [ExpiringLockDistribution!]! @derivedFrom(field: "parent")
  isCancelled: Boolean!
  status: LockStatus!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type ExpiringLockDeposit @entity {
  id: ID!
  parent: ExpiringLock!
  amount: BigInt!
  depositor: EndUser!
  metadata: Bytes!
  createdAt: BigInt!
}

type ExpiringLockDistribution @entity {
  id: ID!
  parent: ExpiringLock!
  amount: BigInt!
  recipient: EndUser!
  metadata: Bytes!
  createdAt: BigInt!
}

type OnetimeLock @entity {
  id: ID!
  token: Token!
  sender: EndUser!
  recipient: EndUser
  amount: BigInt!
  expiry: BigInt!
  metadata: Bytes!
  recipientMetadata: Bytes
  status: LockStatus!
  txHash: Bytes!
  recipientTxHash: Bytes
  createdAt: BigInt!
  updatedAt: BigInt!
}

type TransferWithSecret @entity {
  id: ID!
  token: Token!
  sender: EndUser!
  recipient: EndUser!
  amount: BigInt!
  metadata: Bytes!
  recipientMetadata: Bytes
  status: LockStatus!
  txHash: Bytes
  createdAt: BigInt!
  updatedAt: BigInt!
}

type TransferRequest @entity {
  id: ID!
  token: Token!
  sender: EndUser!
  recipient: EndUser!
  amount: BigInt!
  metadata: Bytes
  txHash: Bytes!
  createdAt: BigInt!
}

enum MovingType {
  NONE
  DIRECT
  SECRET
  ONETIME
  EXPIRING
}

type CoinMovingHistory @entity {
  id: ID!
  movingType: MovingType!
  token: Token!
  sender: EndUser!
  recipient: EndUser!
  amount: BigInt!
  metadata: Bytes
  txHash: Bytes!
  createdAt: BigInt!
}
