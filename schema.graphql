type Token @entity {
  id: ID!
  address: Bytes!
  totalSupply: BigInt!
  totalUniqueSenders: BigInt!
  totalTransfers: BigInt!
  totalTransferAmount: BigInt!
  uniqueTokenHolders: BigInt!
  tokenHolders: [TokenHolder!]! @derivedFrom(field: "token")
  createdAt: BigInt!
  updatedAt: BigInt!
}

type EndUser @entity {
  id: ID!
  address: Bytes!
  isSmartWallet: Boolean!
  createdAt: BigInt!
  updatedAt: BigInt!
  p256PublicKeys: [P256PublicKey!]! @derivedFrom(field: "wallet")
  owners: [BelongToSharedWallet!]! @derivedFrom(field: "sharedWallet")
  sharedWallets: [BelongToSharedWallet!]! @derivedFrom(field: "owner")
  nameContract: ProfileNameGroup
  domain: BigInt
  name: String
  pictureHash: Bytes
  imageContract: Bytes
  imageTokenId: BigInt
  metadata: Bytes
}

type BelongToSharedWallet @entity {
  id: ID!
  index: BigInt!
  owner: EndUser!
  sharedWallet: EndUser!
  isRemoved: Boolean!
}

type P256PublicKey @entity {
  id: ID!
  publicKey: Bytes!
  index: BigInt!
  wallet: EndUser!
  isRemoved: Boolean!
}

type TokenHolder @entity {
  id: ID!
  token: Token!
  holder: EndUser!
  balance: BigInt!
  receivedAmount: BigInt!
  sentAmount: BigInt!
  receivedCount: BigInt!
  sentCount: BigInt!
  uniqueReceivedCount: BigInt!
  uniqueSentCount: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type TokenFollow @entity {
  id: ID!
  token: Token!
  following: EndUser!
  followed: EndUser!
  createdAt: BigInt!
  updatedAt: BigInt!
}

enum LockStatus {
  LIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

type OnetimeLock @entity {
  id: ID!
  token: Token!
  sender: EndUser!
  recipient: EndUser
  amount: BigInt!
  expiry: BigInt!
  metadata: Bytes!
  recipientMetadata: Bytes
  status: LockStatus!
  txHash: Bytes!
  recipientTxHash: Bytes
  createdAt: BigInt!
  updatedAt: BigInt!
}

type TransferWithSecret @entity {
  id: ID!
  token: Token!
  sender: EndUser!
  recipient: EndUser!
  amount: BigInt!
  metadata: Bytes!
  recipientMetadata: Bytes
  status: LockStatus!
  txHash: Bytes
  createdAt: BigInt!
  updatedAt: BigInt!
}

type TransferRequest @entity {
  id: ID!
  token: Token!
  sender: EndUser!
  recipient: EndUser!
  amount: BigInt!
  metadata: Bytes
  txHash: Bytes!
  createdAt: BigInt!
}

enum MovingType {
  NONE
  DIRECT
  SECRET
  ONETIME
  TOKEN_DISTRIBUTE
}

type CoinMovingHistory @entity {
  id: ID!
  movingType: MovingType!
  token: Token!
  sender: EndUser!
  senderName: String
  recipient: EndUser!
  recipientName: String
  recipientTokenHolder: TokenHolder
  amount: BigInt!
  metadata: Bytes
  tokenDistributeRequest: TokenDistributeRequest
  txHash: Bytes!
  createdAt: BigInt!
}

type SwapV1History @entity {
  id: ID!
  reactor: Bytes! # address
  token: Token!
  swapper: EndUser!
  amount: BigInt!
  outputs: [OrderFilledHistoryOutput!]! @derivedFrom(field: "parent")
  txHash: Bytes!
  createdAt: BigInt!
}

type OrderFilledHistoryOutput @entity {
  id: ID!
  parent: SwapV1History!
  token: Token!
  amount: BigInt!
  recipient: EndUser!
}

enum TokenDistributeRequestStatus {
  PENDING
  COMPLETED
  CANCELLED
}

type TokenDistributeRequest @entity {
  id: ID!
  status: TokenDistributeRequestStatus!
  token: Token!
  sender: EndUser!
  publicKey: Bytes!
  totalAmount: BigInt!
  amount: BigInt!
  finalAmount: BigInt!
  amountPerWithdrawal: BigInt!
  cooltime: BigInt!
  maxAmountPerAddress: BigInt!
  expiry: BigInt!
  name: String!
  coordinate: Bytes
  txHash: Bytes!
  createdAt: BigInt!
}

type ProfileNameGroup @entity {
  id: ID!
  name: String!
}

type PumToken @entity {
  id: ID!
  token: Token!
  address: Bytes!
  name: String!
  symbol: String!
  metadata: String!
  issuer: EndUser!
  uniqueBuyers: BigInt!
  isMarketOpen: Boolean!
  reserveCT: BigInt!
  reserveStable: BigInt!
  price: BigInt!
  tokenPrices: [PumTokenPrice!]! @derivedFrom(field: "token")
  latestPriceDay: PumTokenPrice
  createdAt: BigInt!
  updatedAt: BigInt!
}

enum PumAction {
  ISSUE
  BUY
  SELL
  POINT
}

type PumActionHistory @entity {
  id: ID!
  user: EndUser!
  action: PumAction!
  token: PumToken
  recipient: EndUser
  amountIn: BigInt
  amountOut: BigInt
  txHash: Bytes!
  metadata: String
  createdAt: BigInt!
}

enum PriceInterval {
  HOUR
  DAY
}

type PumTokenPrice @entity {
  id: ID!
  token: PumToken!
  interval: PriceInterval!
  open: BigInt!
  high: BigInt!
  low: BigInt!
  close: BigInt!
  change: BigInt!
  volume: BigInt!
  traderCount: BigInt!
  buyers: [EndUser!]!
  sellers: [EndUser!]!
  startAt: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type PumProfileBadge @entity {
  id: ID!
  user: EndUser!
  title: String!
  createdAt: BigInt!
}
