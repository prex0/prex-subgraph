type Token @entity {
  id: ID!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type EndUser @entity {
  id: ID!
  createdAt: BigInt!
  updatedAt: BigInt!
}

enum LockStatus {
  LIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

type OnetimeLock @entity {
  id: ID!
  token: Token!
  sender: EndUser!
  recipient: EndUser
  amount: BigInt!
  expiry: BigInt!
  metadata: Bytes!
  recipientMetadata: Bytes
  status: LockStatus!
  txHash: Bytes!
  recipientTxHash: Bytes
  createdAt: BigInt!
  updatedAt: BigInt!
}

type TransferWithSecret @entity {
  id: ID!
  token: Token!
  sender: EndUser!
  recipient: EndUser!
  amount: BigInt!
  metadata: Bytes!
  recipientMetadata: Bytes
  status: LockStatus!
  txHash: Bytes
  createdAt: BigInt!
  updatedAt: BigInt!
}

type TransferRequest @entity {
  id: ID!
  token: Token!
  sender: EndUser!
  recipient: EndUser!
  amount: BigInt!
  metadata: Bytes
  txHash: Bytes!
  createdAt: BigInt!
}

enum MovingType {
  NONE
  DIRECT
  SECRET
  ONETIME
  TOKEN_DISTRIBUTE
}

type CoinMovingHistory @entity {
  id: ID!
  movingType: MovingType!
  token: Token!
  sender: EndUser!
  senderName: String
  recipient: EndUser!
  recipientName: String
  amount: BigInt!
  metadata: Bytes
  txHash: Bytes!
  createdAt: BigInt!
}

type SwapV1History @entity {
  id: ID!
  reactor: Bytes! # address
  token: Token!
  swapper: EndUser!
  amount: BigInt!
  outputs: [OrderFilledHistoryOutput!]! @derivedFrom(field: "parent")
  txHash: Bytes!
  createdAt: BigInt!
}

type OrderFilledHistoryOutput @entity {
  id: ID!
  parent: SwapV1History!
  token: Token!
  amount: BigInt!
  recipient: EndUser!
}

enum TokenDistributeRequestStatus {
  PENDING
  COMPLETED
  CANCELLED
}

type TokenDistributeRequest @entity {
  id: ID!
  status: TokenDistributeRequestStatus!
  token: Token!
  sender: EndUser!
  amount: BigInt!
  amountPerWithdrawal: BigInt!
  expiry: BigInt!
  name: String!
  metadata: Bytes
  txHash: Bytes!
  createdAt: BigInt!
}
